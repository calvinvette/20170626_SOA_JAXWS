package com.triveratech.training.xml.rest;

import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 * The DOMErrorHandler class is used to take care of errors encountered by a DOM
 * parser. When error is called, a flag is set for later reference
 *
 *
 * <p>
 * This component and its source code representation are copyright protected
 * and proprietary to Trivera Technologies, LLC, Worldwide D/B/A Trivera Technologies
 *
 * This component and source code may be used for instructional and
 * evaluation purposes only. No part of this component or its source code
 * may be sold, transferred, or publicly posted, nor may it be used in a
 * commercial or production environment, without the express written consent
 * of Trivera Technologies, LLC
 *
 * Copyright (c) 2017 Trivera Technologies, LLC.
 * http://www.triveratech.com   
 * </p>
 * @author Trivera Technologies Tech Team.
 */



public class DOMErrorHandler implements ErrorHandler {
  /** ***************************************************************** */
  /** ***********************Variables********************************* */
  /** ***************************************************************** */

  private boolean errorCondition = false;

  /** ***************************************************************** */
  /** ***********************Constructor******************************* */
  /** ***************************************************************** */

  /**
   * Parameterless constructor
   */
  public DOMErrorHandler() {

  }

  /** ***************************************************************** */
  /** ***********************Methods********************************* */
  /** ***************************************************************** */

  /**
   * External users can a reference the valid flag.
   */
  public boolean isValid() {
    return !errorCondition;
  }

  /**
   * Method handles warnings that are generated by the parser.
   *
   * @param ex
   *            SAXParseException that is generated by the parser using this
   *            error handler.
   */
  public void warning(SAXParseException ex) {
    System.err.print(handleDOMError(ex));
  }

  /**
   * Method handles errors that are generated by the parser.
   *
   * @param ex
   *            SAXParseException that is generated by the parser using this
   *            error handler.
   */
  public void error(SAXParseException ex) {
    errorCondition = true;
    System.err.print(handleDOMError(ex));
  }

  /**
   * Method handles fatal errors that are generated by the parser.
   *
   * @param ex
   *            SAXParseException that is generated by the parser using this
   *            error handler.
   * @exception SAXException
   *                that passes the incoming error message on after we
   *                complete processing
   */
  public void fatalError(SAXParseException ex) throws SAXException {
    errorCondition = true;
    System.err.print(handleDOMError(ex));
  }

  private String handleDOMError(SAXParseException ex) {
    StringBuffer errorString = new StringBuffer();
    if (ex.getLineNumber() == 0 && ex.getColumnNumber() == 0) {
      errorString.append("Parsing error.\n");
      errorString.append("  " + ex.getMessage() + "\n");
    } else {
      errorString.append("At line number, ");
      errorString.append(ex.getLineNumber());
      errorString.append(", and column number ");
      errorString.append(ex.getColumnNumber());
      errorString.append("\n   " + ex.getMessage() + "\n");
    }
    ;
    return errorString.toString();
  }

} // class DOMErrorHandler
