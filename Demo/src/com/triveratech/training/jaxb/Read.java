package com.triveratech.training.jaxb;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

// import java content classes generated by binding compiler
import personnel.*;

/**
 * <p>
 * This component and its source code representation are copyright protected
 * and proprietary to Trivera Technologies, LLC, Worldwide D/B/A Trivera Technologies
 *
 * This component and source code may be used for instructional and
 * evaluation purposes only. No part of this component or its source code
 * may be sold, transferred, or publicly posted, nor may it be used in a
 * commercial or production environment, without the express written consent
 * of Trivera Technologies, LLC
 *
 * Copyright (c) 2017 Trivera Technologies, LLC.
 * http://www.triveratech.com   
 * </p>
 * @author Trivera Technologies Tech Team.
 */



public class Read {

    // This sample application demonstrates how to unmarshal an instance
    // document into a Java content tree and access data contained within it.

    public static void main( String[] args ) {
        try {
            // create a JAXBContext capable of handling classes generated into
            // the personnel package
            JAXBContext jc = JAXBContext.newInstance( "personnel" );

            // create an Unmarshaller
            Unmarshaller u = jc.createUnmarshaller();

            // unmarshal a personnel instance document into a tree of Java content
            // objects composed of classes from the personnel package.
            Personnel ps = (Personnel)u.unmarshal( new FileInputStream( "personnel.xml" ) );

            // examine some of the content in the Personnel
            System.out.println( "Person Count:" );
            // display the Person Count
            List people = ps.getPERSON();
            System.out.println(people.size());

            displayPeople(people);

        } catch( JAXBException je ) {
            je.printStackTrace();
        } catch( IOException ioe ) {
            ioe.printStackTrace();
        }
    }

    public static void displayPeople( List peopleList ) {
        // the peopleList object contains a List of personnel.PEOPLEType objects

        // iterate over List
        for( Iterator iter = peopleList.iterator(); iter.hasNext(); ) {
            PERSONType person = (PERSONType)iter.next();
            System.out.println( "\t" + person.getGIVENNAME() +
                                " " + person.getSURNAME());
        }
    }
}
